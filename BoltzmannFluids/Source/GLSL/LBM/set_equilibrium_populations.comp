#<compute shader>

#version 460 core

#define D2Q9 0
#define D3Q15 1
#define D3Q19 2
#define D3Q27 3

#define fp16 0
#define fp32 1

#define floating_point_accuracy fp32
#define velocity_set D2Q9

#if velocity_set == D2Q9
	#define volume_dimentionality 2
	#define velocity_count 9
#elif velocity_set == D3Q15
	#define volume_dimentionality 3
	#define velocity_count 15
#elif velocity_set == D3Q19
	#define volume_dimentionality 3
	#define velocity_count 19
#elif velocity_set == D3Q27
	#define volume_dimentionality 3
	#define velocity_count 27
#else
	#error "velocity set is not supported"
#endif

#define D2Q5 4
#define D3Q7 5

#define thermal_flow 1
#define velocity_set_thermal D2Q5

#if velocity_set_thermal == D2Q5
	#define thermal_velocity_count 5
#elif velocity_set_thermal == D3Q7
	#define thermal_velocity_count 7
#else
	#error "thermal_velocity_set is not supported"
#endif

#define multiphase_flow 1

#define lattice_is_texutre3d 1
#define lattice_texture3d_internal_format r16f

#define id gl_GlobalInvocationID

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 0) uniform velocity_set_buffer {
	vec4[velocity_count] lattice_velocity_set;
};

#if lattice_is_texutre3d == 0
layout(std430, binding = 1) buffer lattice_buffer {
	float[] lattice;
};
#else
layout(lattice_texture3d_internal_format, binding = 0) uniform image3D lattice;
#endif

#define velocity_field_dimentionality 4
layout(std430, binding = 2) buffer velocity_buffer {
	float[] velocities;
};

layout(std430, binding = 3) buffer density_buffer {
	float[] densities;
};

uniform ivec3 lattice_resolution;

uint coord_to_id(ivec3 pixel_coord){
	return pixel_coord.z * lattice_resolution.y * lattice_resolution.x + pixel_coord.y * lattice_resolution.x + pixel_coord.x;
}

uint id_to_address(uint voxel_id, uint population_id){
	uint voxel_count = lattice_resolution.x * lattice_resolution.y * lattice_resolution.z; 
	return population_id * voxel_count + voxel_id;
	//return voxel_id * velocity_count + population_id;
}

uint coord_to_address(ivec3 pixel_coord, uint population_id){
	return id_to_address(coord_to_id(pixel_coord), population_id);
}

uint id_to_address_thermal(uint voxel_id, uint population_id){
	return voxel_id * thermal_velocity_count + population_id;
}

uint coord_to_address_thermal(ivec3 pixel_coord, uint population_id){
	return id_to_address_thermal(coord_to_id(pixel_coord), population_id);
}

ivec3 coord_to_tex3d(ivec3 pixel_coord, uint population_id){
	return ivec3(lattice_resolution.x * population_id, 0, 0) + pixel_coord;
	//return pixel_coord * ivec3(velocity_count, 1, 1) + ivec3(population_id, 0, 0);
}

int get_inverse_lattice_population_id_index(int lattice_velocity_index){
	if (lattice_velocity_index == 0 || lattice_velocity_index >= velocity_count)
		return 0;

	bool is_odd = lattice_velocity_index % 2 == 1;
	return is_odd ? lattice_velocity_index + 1 : lattice_velocity_index - 1;
}

float get_lattice(ivec3 pixel_coord, int velocity_index){
	#if lattice_is_texutre3d == 0
	return lattice[coord_to_address(pixel_coord, velocity_index)];
	#else
	return imageLoad(lattice, coord_to_tex3d(pixel_coord, velocity_index)).x;
	#endif
}

void set_lattice(ivec3 pixel_coord, int velocity_index, float value){
	#if lattice_is_texutre3d == 0
	lattice[coord_to_address(pixel_coord, velocity_index)] = value;
	#else
	imageStore(lattice, coord_to_tex3d(pixel_coord, velocity_index), vec4(value));
	#endif

}

vec3 get_velocity_field(ivec3 pixel_coord){
	return vec3 (
		velocities[coord_to_id(pixel_coord) * velocity_field_dimentionality + 0],
		velocities[coord_to_id(pixel_coord) * velocity_field_dimentionality + 1],
		velocities[coord_to_id(pixel_coord) * velocity_field_dimentionality + 2]
	);
}

void set_velocity_field(ivec3 pixel_coord, vec3 value){
	velocities[coord_to_id(pixel_coord) * velocity_field_dimentionality + 0] = value.x;
	velocities[coord_to_id(pixel_coord) * velocity_field_dimentionality + 1] = value.y;
	velocities[coord_to_id(pixel_coord) * velocity_field_dimentionality + 2] = value.z;
}

float get_density_field(ivec3 pixel_coord){
	return densities[coord_to_id(pixel_coord)];
}

void set_density_field(ivec3 pixel_coord, float value){
	densities[coord_to_id(pixel_coord)] = value;
}

vec3 get_lattice_velocity(int velocity_index){
	return lattice_velocity_set[velocity_index].xyz;
}

float get_lattice_weight(int velocity_index){
	return lattice_velocity_set[velocity_index].w;
}

float compute_density(ivec3 pixel_coord){
	//if(get_boundry(pixel_coord))
	//	return 0;
	float density = 0;
	for (int i = 0; i < velocity_count; i++)
		density += get_lattice(pixel_coord, i);
	return density;
}

vec3 compute_velocity(ivec3 pixel_coord, float density){
	//if(get_boundry(pixel_coord))
	//	return vec3(0);
	vec3 velocity = vec3(0);
	for (int i = 0; i < velocity_count; i++){
		velocity += get_lattice(pixel_coord, i) * get_lattice_velocity(i);
	}
	return velocity / density;
}

float compute_equilibrium(float density, vec3 velocity, int population_id){
	float rho = density;
	vec3 u = velocity;
	float w = get_lattice_weight(population_id);
	vec3 ci = get_lattice_velocity(population_id);
	//float cs = lattice_speed_of_sound;

	float ci_dot_u = dot(ci, u);
	float ci_dot_u2 = pow(ci_dot_u, 2);
	float u_dot_u = dot(u, u);
	//float cs2 = pow(cs, 2);
	//float cs4 = pow(cs, 4);

	float equilibrium = w*rho*(
		1 + 3*ci_dot_u + 9 * ci_dot_u2/2 - 3*u_dot_u/2
	); 
	return equilibrium;
}

void main(){
	
	if (int(id.x) >= lattice_resolution.x * lattice_resolution.y * lattice_resolution.z)
		return;

	int pixel_id = int(id.x);
	ivec3 pixel_coord = ivec3(
		pixel_id % lattice_resolution.x,
		(pixel_id / lattice_resolution.x) % lattice_resolution.y,
		(pixel_id / lattice_resolution.x) / lattice_resolution.y
		);

	float density = get_density_field(pixel_coord);
	//if (density == 0)
	//	return;

	vec3 velocity = get_velocity_field(pixel_coord);
	
	for (int population_id = 0; population_id < velocity_count; population_id++){
		float weight = get_lattice_weight(population_id);
		float equilibrium_population = compute_equilibrium(density, velocity, population_id);
		set_lattice(pixel_coord, population_id, equilibrium_population);
	}
}